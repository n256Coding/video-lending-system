/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systemPackage;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NishanV
 */
public class ReturnVideo extends javax.swing.JDialog {

    /**
     * Creates new form ReturnVideo
     */
    String custName;
    int custId;
    public ReturnVideo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
    }
    public ReturnVideo(java.awt.Frame parent, boolean modal, String custName, String custId) {
        super(parent, modal);
        initComponents();
        this.custName = custName;
        this.custId = Integer.parseInt(custId);
        this.setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField_custName = new javax.swing.JTextField();
        jTextField_custId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton_returnAll = new javax.swing.JButton();
        jButton_returnOne = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField_extraAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Return Video");

        jTextField_custName.setEditable(false);

        jTextField_custId.setEditable(false);

        jLabel2.setText("Customer Name:");

        jLabel3.setText("Customer ID:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Ordered Date", "Due Date", "Overdue Dates", "Extra Charge"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton_returnAll.setText("Return All");
        jButton_returnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_returnAllActionPerformed(evt);
            }
        });

        jButton_returnOne.setText("Return Selected One");
        jButton_returnOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_returnOneActionPerformed(evt);
            }
        });

        jLabel4.setText("Extra Amount: ");

        jTextField_extraAmount.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_custName)
                            .addComponent(jTextField_custId, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_returnAll)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_returnOne)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_extraAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_custName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_custId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_returnAll)
                    .addComponent(jButton_returnOne)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_extraAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getData(){
        DBConnect connect = new DBConnect();
        String query = "select * from orders where memberId = "+this.custId+" and returned = no";
        try{
            connect.rs = connect.st.executeQuery(query);
            while(connect.rs.next()){
                //table.addRow(new Object[]{connect.rs.getString("orderId"), connect.rs.getString("orderedDate"), connect.rs.getString("dueDate")});
            }   
        }catch(Exception e){
        }
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
       for(int i = table.getRowCount() - 1; i >=0; i--)
            table.removeRow(i);
        DBConnect connect = new DBConnect();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String query = "select * from orders where memberId = '"+String.valueOf(this.custId)+"' and returned = 'no'";
        int difference, overdueDates;
        try{
            connect.rs = connect.st.executeQuery(query);
            while(connect.rs.next()){
                Date orderDate = formatter.parse(connect.rs.getString("orderedDate"));
                Date dueDate = formatter.parse(connect.rs.getString("dueDate"));
                Date nowDate = new Date();
                difference = (int)((nowDate.getTime()-dueDate.getTime())/(1000*60*60*24));
                if(difference <= 0)
                    overdueDates = 0;
                else
                    overdueDates = difference*5;
                //JOptionPane.showMessageDialog(null, difference);
                table.addRow(new Object[]{connect.rs.getString("orderId"), connect.rs.getString("orderedDate"), connect.rs.getString("dueDate"), String.valueOf(difference), String.valueOf(overdueDates)});
            }
        }catch(Exception e){
            //JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formWindowActivated
    public double calcAmount(String pDueDate, int orderId){
        DBConnect connect = new DBConnect();
        DBConnect connect2 = new DBConnect();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String query = "select * from orders where memberId = '"+String.valueOf(this.custId)+"' and returned = 'no' and orderId="+orderId;
        int difference;
        String qtyReturned, qtyInStock;
        int newQty;
        double amount = 0.0;
        try{
            connect.rs = connect.st.executeQuery(query);
            while(connect.rs.next()){
                Date dueDate = formatter.parse(pDueDate);
                Date nowDate = new Date();
                query = "select * from videos where videoId = '"+connect.rs.getString("videoId")+"'";
                connect2.rs = connect2.st.executeQuery(query);
                connect2.rs.next();
                qtyInStock = connect2.rs.getString("qty");
                qtyReturned = connect.rs.getString("qty");
                newQty = Integer.parseInt(qtyInStock)+Integer.parseInt(qtyReturned);
                query = "update videos set qty = "+newQty+" where videoId = '"+connect.rs.getString("videoId")+"'";
                connect2.st.executeUpdate(query);
                query = "update orders set returned = 'yes' where orderId = "+orderId;
                connect2.st.executeUpdate(query);
                difference = (int)((nowDate.getTime()-dueDate.getTime())/(1000*60*60*24));
                if(difference <= 0)
                    amount = amount+0;
                else
                    amount = amount+(difference*5.0);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return amount;
    }
    
    private void jButton_returnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_returnAllActionPerformed
        DBConnect connect = new DBConnect();
        double totAmount = 0.0;
        String query = "select * from orders where memberId = "+this.custId+" and returned = 'no'";
        try{
            connect.rs = connect.st.executeQuery(query);
            while(connect.rs.next()){
                totAmount = totAmount+calcAmount(connect.rs.getString("dueDate"), Integer.parseInt(connect.rs.getString("orderId")));
            }
        }catch(Exception e){
        }
        jTextField_extraAmount.setText(String.valueOf(totAmount));
        JOptionPane.showMessageDialog(null, "All of Your Orderes has Cleared Successfully.\nThank You!!");
    }//GEN-LAST:event_jButton_returnAllActionPerformed

    private void jButton_returnOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_returnOneActionPerformed
        int row=jTable1.getSelectedRow();
        String orderId=(jTable1.getModel().getValueAt(row,0).toString());
        boolean invalidOrderId = false;
        //String orderId = JOptionPane.showInputDialog("Please Enter Order Id:");
        if(orderId.equals("")){}
        else{
            DBConnect connect = new DBConnect();
            double totAmount = 0.0;
            String query = "select * from orders where memberId = "+this.custId+" and returned = 'no' and orderId = '"+orderId+"'";
            try{
                connect.rs = connect.st.executeQuery(query);
                if(connect.rs.next() == false)
                    invalidOrderId = true;
                else
                        totAmount = totAmount+calcAmount(connect.rs.getString("dueDate"), Integer.parseInt(connect.rs.getString("orderId")));
            }catch(Exception e){
            }
            if(invalidOrderId == true)
                JOptionPane.showMessageDialog(null, "Invalid Order Id !!");
            else{
                jTextField_extraAmount.setText(String.valueOf(totAmount));
                JOptionPane.showMessageDialog(null, "Your Order has Cleared Successfully.\nThank You!!");
            }
        }
    }//GEN-LAST:event_jButton_returnOneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReturnVideo dialog = new ReturnVideo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_returnAll;
    private javax.swing.JButton jButton_returnOne;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_custId;
    private javax.swing.JTextField jTextField_custName;
    private javax.swing.JTextField jTextField_extraAmount;
    // End of variables declaration//GEN-END:variables
}
